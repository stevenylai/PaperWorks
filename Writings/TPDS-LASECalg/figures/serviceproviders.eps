%!PS-Adobe-3.0 EPSF-3.0
%%Title: (serviceproviders.pdf)
%%Version: 1 6
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 14:00:35 05/29/12
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%ADO_ContainsXMP: MainFirst
%%BoundingBox: 0 0 133 155
%%HiResBoundingBox: 0.0 0.0 132.75 155.25
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - general image support) 1.2 0
%%+ procset (Adobe Acrobat - monochrome image support) 1.2 0
%%+ procset (Adobe Acrobat - color image support) 1.2 0
%%+ procset (Adobe Acrobat - indexed color image support) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
1 pop
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 3388 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:CreateDate>2012-05-29T14:00:35+08:00</xap:CreateDate>
         <xap:ModifyDate>2012-05-29T14:00:35+08:00</xap:ModifyDate>
         <xap:MetadataDate>2012-05-29T14:00:35+08:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:F435FA8653A9E111BE7586D53BE239AF</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:F435FA8653A9E111BE7586D53BE239AF</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:8c7b54ff-2ccb-4d7c-802a-d0c04791822e</stRef:instanceID>
            <stRef:documentID>uuid:a3db7087-ae97-4c52-b18e-e09db0686d80</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
0.0 0.0 132.75 155.25 rectclip
q
0.0 0.0 m
132.75 0.0 l
132.75 155.25 l
0.0 155.25 l
h
W
n
q
132.75 0.0 0.0 155.25 0.0 0.0 cm
q
n
0.0 0.0 1.0 1.0 re
[/DeviceRGB] cs 
<<
/ImageType 1
/Width 177
/Height 207
/ImageMatrix [177.0 0.0 0.0 -207.0 0.0 207.0] 
/BitsPerComponent 8
/Decode [0.0 1.0 0.0 1.0 0.0 1.0 ] 
/_Filters [currentfile /ASCII85Decode filter dup /DCTDecode filter dup 
] >>
pdf_image s4IA>!"M;*Ddm8XA:OX[!!3,S!/(=\#RC\A#RgtE$kNdS$P4!^%1Nd](_RJq'+u,r
&el#o'G;)o)]g%A)\aPF-RU8e1,UpH1-7QZ4$,Mc4$,M)%13FN$4ICQ$k<jZ%Ls'b
%hB0]'GM)j&ePZh'GD/q'bh;q'bqGu'bqH%)B'M4)BKq@*ZcON,9nQ`-S-f"s1eUH
#QW0NYlb"N!!3`5!tbS6_uW1)!!*6(!<E3%!<<*"z!rr?'"9eu7#RLhG!<<-(!<E3%
!<E0#z!!*'$!sAc3#7(VC$P3:="9AT+"9J`3"pbA7$o7na!YGM;+VHL55uD&(,&r/h
"r*2nYsKZ\'iMkW1Gj-(d6e-bP#Ll/nRHVt(8A*e-:F%sA4=A1F>ar`<T7T\Z\66F
FlW'_-^:E\[$ASZjRf:V`RX)C<b?N0QDV+1f&lZb7os>ILR4pJa4KMK&HDk6!<NB,
!sAc3#6tG73ro<_&Ha12&d1Kt@<!J)"YtXk'VVcu,Jd:*n1u>!iGsO56W4_0F#<D5
"r<r=K*N_\_U:i9<217?79)6fA`E9eKYu8]j7>a)UkQ1@`73l?V7":mjn2YdG(u<[
[`6n\p*Vdh=(c`4Q`%=5fB;o.g&MN`!<<05!tbMt!;&DQUQOl6S^SLtjG&HED6doM
Y515t91tf=d@cO57[&DQ?'gW%Z*EjUo.FhPS@b1sTsX[AoPq=k9,J09,\oFMASHQu
5.=1gW'=L4JTbUbmS1`C8+mh.UW<TYYH+3Y39It1NOmoi)fqCpqH=`e1fWM6g-K]L
.DR.U[Ja=+IZW@aVhj/9?&`dV=Pk%S>?EG;h(@E3H?;4_?VX<HaN&P2X'-Rb[)d;Z
O@$!P?J=,f*PK5gkJV6\C1):d]`@mh*D<:@k4/!GP`OX46Q:*9rr?pQV')F:KT];\
hIW6>UM&c<-Hp:ADQFleR)_5%LeUNH-`CWh?"PHUF"1`R2;aepmfDJ5=%aeD3PF3i
C!mu3%V$"s1H26rM`Td-N6A[PdWSH!5o!MejA<k)\SuAG@d:0P)1dQ<*FuZX^s_8d
O68[_DE=CI9,FC9iS=#oGo66c=d&&E9g?qUlX%j-5Fi,1[aVQA5GXBeS\m)f@-*]3
mA>@oi4p2lGe'qohVof?V+'`^XEA\C3KF?HC"*]9+KUT[on+2&Vi2UmB%po,[pj9Z
$SM.`\G!Y:c`:%VCPcOhlcKhSOC"2Ll9.SgNisB?Z$p9BR]7`N6X(M2Z.d)7,IGaI
=8r8j]fZ0';#^ONDKl*NWgt(%oc0QseRAIXV8)Bi$Q/0cb,Aue@:bF6S*r"P&338h
.69J[G4)2bPD`I[=)B<6[_9t/T45iLYL8/,Zh0^Tr9'XeQ4#b)2DnW>g!/e6HUHU`
`NNdfenE-?>2^]cgP<\3G2,"1SORU=%`ba+_g<J)ek&(:9j(5a[aJSrd@ZHSMBi6r
>fR+s*n(U/a(I7"X=RTip2@$8)!o\`gh,X`p(l*89ATQD3J72ZBe\b]9-YfK2`g7Z
H;!!e<4LP'A)"cT1j*oG5V?sbER5^KR=kHGcZ`(HH2U(8)eM8sO0"p3L7Ot/TgK2#
]GsO_lM;4!0GDQg>^XZCU'73YH0e_G^3LUKfm-WXS"3*"g3-``ZGTW/'oH-b'%60P
_"38f??Ufj+E^=H?5Xp$Cb6CT;*"f+=9Aq\QI+:P,"Mes/[ZZeN6<]f2]RlEJ2Q8O
qTc4OL`qK8;%jjA/NYJclJG=<%qU_PHVU6A_?_U?Mf0lHriKCASK=Y5iqMJ9IO=f(
>VU-&(c\-($DhJa/lG7dP+3#Da'mM:6ugmt#qVmEcGsoOM[,2"g4,@8\U(B_Jr8l@
Ia%(sgXPYoo4)Viai@i$_kCuA)^]"@41#C-l5_X?TG[7_d="sWjO-<!\`=49^pM+`
E$4p,Cp2Ul2Z-fFE3b6q^!ngcf?cm=2e3_,`g]9fdRJm]n4p>h5)3],A*0(?UBZ[H
#!;QRD5jUFIb,8*>5eI$"`ru-2EJLRVe\pGe8FrH`s?a#@i89E%hdH2O6%eMoLt1$
*S'Uie^jtlGkLo8i/TaO3UX18aD^WM_?ASC;Q\GfX6NtT-`>ZhAmI;ki].([Q4cCS
AL%oJo_b2bE(_f1SB?DX,W7!]RN]TS![I<+,>^[.[o%)Abj$`s:!IiAl:9>6)se;F
Pl^;)4M[><dV&3<j]XG0DK[(/)guJ:E-k(`[>rZ%r't3BA_C_I._:<s+L_QqACGtd
kd?E)9;l@_YC<W7"7uFhYIZ12bfd$p)>R?/g;hTSQT1NS`X_EVcjo/5Tj_5Xdjh7B
#".3Y7Go$bgkWW@!'UG7&.n@-4cR.cSPLKtR2,$a$l.5g3c;+"H/0R4k;`6'dm0C!
'W$SFe'n0-Aegb9Rf<Ar@lWsNRb$A'`NF+IK=m)s<V(0L\qN>&91],=Z-=SuA&f*i
L95Ed69rsoY8PnDY)KtGknig2I<j&@2THf0=d7_8[FLo=9Iq-1b@<oBY=/7,1\0hq
Deni2(sd,trTs3IE]lcFIDpfDn%ZH"HTKbIXCTq#5'nAo(r=h.dsU4^?9:+!<ou@H
>:(3EK!SNJl8_&bV3>1ejHAkG()k*RO_)ib`#n&pr)'\UA^Xb'HDXbE+3ZI!_o?oh
luSeIKD?h4XWQ(DAOa8sVRG#R6RuOR@i?IH%0-BO:?OKo06n"B5q[0(!')>aFLY[[
nHWBAI][N>WnO#+QM0n#$"X59<r7[F$>+E#gNl6UVN(O@W2Ap2gq43Mba-F?mN*t?
Q#E>'f@+Y?Zk6qLJ#q"=/YEQ_m.0jsM#HKN9`C21D>RokcGRj+1to_bgDW%geX[`d
D*]1u6lJ?,ni]4cHSMe:Z_-qGQ.,u@b&D$Bc*D-A6_[u$a,&2p[sE4=n\2/8B4mRF
ca-U6&#EiuF'H&FEaJ<%*[M<ZI:-r@4W_UN=R:o_aDJjt)?r:eCSm_IUu'N_lUqb`
]pH2aWEsXd=[&?7e#&j-'3/8/#!Y,nEV"j""]A*NKl9cOFQ;FPY'8]Ndj*GWm_7=;
)sf8^UloIlP"?pq/=s3J!%@ImrA[s[!4FoQp25%,:T)gfI`@NhciJ3Zj25!=!p;Yd
"j6L6XT#t4_[XU&kGDg:p,=bll#XO3H`1_%2?oB=QFLfsE_:[(Q=_LLWnX#"Rmjh)
()X0?L6bqh/%2oMK`;$!6bJ_R8lA5+P*E7mJ+6Of^\$EUrrA\&C:0\a0m[eKDVY,+
T1Y!0CpqFJCE(o$XtU*$\WQQNbg*n]QUWJka/^]rA(cuC/UQlk*Tq,10UD[%Jch&_
.I<3s0KR33D20"QZPP'cEQ6(5C\Ecn_U@R/%cr^)YGA!?Ord(](mMc[-H=S9@rpMu
!"XrZF+1Fp!6Naj!9qCurrDH[.b7jSeh=,K^:LPI`NbVU2Hq`S5*#>HA5dd.>X$LF
VmkHtb1FW/b>Xm7qMmGC/@Ydfn(VCYGL;m1-YN.j;PcH*/$>)#g,^Gh];W6Jki?5T
%`glg"BY,>eQG$_p$CJJZL(cWI?P?D-AN0,O6bQ4iYp=2l@8j7#Qm<nFHnufWJf66
1>VY0D#.9+[(b/4,W'HFG8LG$,rK^mnQ"&Qo\Z;@!2$i;em*Fsj0p\Fj5e[F"7`D6
_YZ3Y't2`.gG.Q.o"nQ'<rrKHkjUXI2KacpZHR-^NR#PbBPj5`gtegNHZeG1+Y$E9
,a(_k8L0HtK@?Cg:?sskhX0`Z=?uC_4'f16I-iNB:P95$2^Dt?rk"!A)tFM:+Ah"D
krX&?<;YP8!!_SR>!H&CVpTLh?2Wh0:+`6Xb]attpp*qL0@jC?Z2I<5;_G]0DESMA
eNA8S`miVPeS#J/GPegEKW"HGm5GBa3dWQ$^q$2Jf(*HOcoo28%#G4S5)#>Ge6Ros
j(;$i`u`D70,n,,<Z(8ihV%Lb%[i`.;_P="1gc)\W3k/<*(*k:F$la[CW;6m7ETs@
Z?7bjp0@IuGgG_o_lC0#dIH"%qMmmH,X"0u?<&se[q9.k[:@ebCd&;9/ogc?1;WhL
r2[CTr?nL"5<#QCAJI&lYVFG1TBqQP&ee0,V.84/qgN5WHRoOX-hA]ddbj-:$kJce
Q&Ui"A[i35rr?QBQFB$1#5>J_VQm\7ake(EWS,46>GEe'4ZU(/4egtZ6J<@<Zo`Nf
c-FlE\u`J(mVY\s_*F^iIqa?rX>bG[>tqltft2XT[`&!fAG*+.IMg>)@pEcZLOBuJ
kuD-f05pA$`eQm^oShh[\og#OBP"=VA]u'IgJaYCXWQ)?#ZZ1gB[=Jl1q1pl2I+ps
f)rFtHmC6bWnf`YW4P1S=d[66P@f7tV`-)[*)+O,I4l>aI;BO"mK+"lHUWZpqbsP%
lTNnV1$u!,*Z^BM50H`^_!oqM*Q[.0CSuZZl6#ndcMmn$V,O)7gabFH:'K_+QKNm1
h.,6`R`egmq]+c\ksU`V-qAD#RQY8QepUr$2P7E5ObW^<AefGjmH2DJ28\YF&Hfje
@io%fZ"SKn0K%l6X_Zag+&T-@Z?sB@QL;AK;uY6_9K6t&-Q9G"EO\4F\%0e.@NG/T
!!ei=r=>mgo`eRmcV9_V(elPm[Cr'I^6<JN#mN5*d(rIE?2</:4h2Y9ESa.Y)O]%/
FY'^@HX4r^BCt'\!:%@**\K<0=Ogj?[q.BN[8u/hY\aL1$QgFYo"MKC,A;;R0_TDR
IS8f.Qt9WG][l@^h/GZLQW=;2q:D"7)RnMm5BVLdr^E=)nZ?@eCs<WaQ3E[/rR2hA
S,A0+#N*WQa4<A"Er$#;`hC$3ZPq31rq!RcDpO,=0<-e1Ouf0_(COGETG%@GpG%rT
f1C4O@Y3T<NRSG4F:.T\VlAL7l.F/5MCX-Ech0FqXg"Emc->u)GA(7dINR;mg;eMB
'qP-oO/5j,HX&dkmPHsUVtJj-AH'fWA(Qme?HY)T/o:cnWiO&>A3%N`2g-QT(8jjk
%-h+W+/jqjD8*8`Bf!,YmLuK'\gVFfSF>0;3fMME:%gE%CZf8f-'kn7051dQani.H
kgeHV2^[m]])-r;-R.o7ccqaZXI-Oi,a(c?1N9Y)12Z:s2SWP,_90\!1!ae>K%aJh
f'h;m+HR!@5oSZAr>Jd!VbtTK9eBq$he]CEF_-W:m/uWeZ-IJDPHNh-rn1iTTD;!N
J*FhrrNX[:'N:XQrmQ9r;:8Zg3=g8C*D\#c8Xl4PG?%l$_X\Vl)\(Q!VoM:hU^Hrc
0tLk(r"@eD4i^K<B66/Sr@GL_4q9)C,`/n$_TSiA&tIY^2;Z.Bc@eaHNl6,KLJ@dK
.!7)DY'$bT_8Gcq>JEsArk5(F_18O'=]b6BZFVY;gNQPFX4!%PYJ&\2@!<<pRu`c!
rZ3XN34.Z)NO;U&f"oI_Lt)3mV].Ps/#V!I=H'iH%#rQeMF2D=?N1"HSObt:RuZmK
K:i\m%%gn$$i\TRWH1+WJ#FH#>:kBO7q^N292=,#qdt<=g8pg:r)Ik-rAWp>!9`d=
NM;k$=E`ld=48n(],.>!TpFSt%<l.)c>+pl?JYV]SEDcEaW8@WTZ6X'Vpf_Q!L5X9
ST#JIbFm42<jAbKf37I;<l$phVW;/CgE12AV#LGMY^<F#p0IbbRnIU1oc+@qH[;#R
g\/'7e$?HMAb?+0.s&,Pk)rAC)G(ssqHe.+>rs,iDT?$bF4pGOiTreZE$8FW:Diiu
at4j;A7bD[/@t-:nep[!Y/qG;b:CYL$XN]%[_p/ih[$Q>F6pWaH>g";19YIC3HnQg
A(P!tjg+md:9a+l8_>"YOQ0:*0DqA:rgZ#frnh1eA9a52:7HdjT0nuQlJ67#\JGh^
b8^L7NF5+="0_bUBdA:0\_a+0m),RaC?`&LVVLW:1EI##Y7;=cXep<H4Dk-jC!m:6
F@dd#Vi,^o74iRsl>IP`g[!QETR)YBN2f(dAM`^h7!j#?25?"`G>Z8YVUJ8l]e6`O
X";<r]C2ksDT:7N]qN@.3PZ^;Y2ORPrr<d>49#:Tq>UHjqkgK+D%s<[f!I<-#(Za`
!!,,P+I+488L[:[XT&:C4U_8i:)8?HNd<=-;S'KS_:+e+ZHGVlCb\p@1)fI';G8+5
*;L%E02TO1IWnL(]h9]qXN5[he-]omQSsd#b[IBhC=;8AS9[S\<P;R/&\/odV1+UP
e(!n,o\<R"jY2/Xk_!#G*W`B,)ifgE;<hu;l#+hdgO$#;"s=+SD3kgV)@5]m4DWl+
'W3%Q$hHE5]k\;u\*EM<9,k(7pAjR2J`$)F0u(nsdFE)XeB=h1I<IG1NZ*N$#m;Am
bSKj;)K<TRNaO3W%kk3K^<7%VT&Na6Mu&^l4Up+(&;tOXn?p6SNW0!\]rl"`%ht8o
/=`@1<HR^.2s:2@kO+e2/#_T@?Y1*F$jMp$r4>7CCj.5;f[hsnicW`Ok&a]hSjhO=
Rmk"\2q4k..'GA'*N^,?<IL8%YO'6Cc*`S_IZN?!WntuHNE8s&l&KP*Ze:IuiYjTi
hbDXbT_6qDDUO"tYoUUuXct<"jRg4:qO^UKB1=oA59+k"P$R@(n@=U"rifSL-`hcr
S(%5<dC%a&9S<?F"dE3,pKZGO;QTO4U\6?9RVVdi?1[:,%bV<f:OBM'`lOA7&kE<X
XnA%[:8e*l:)u:n!,o,CZJrHbI^!r9W]F.j+o<^h4L1;4)Rd2C9gPW.fhZU'l39nV
a_5e/^9V_Dcc3ZoeN7`Z'/3JARcZT8`n,W5Xg/qq)k4&""DFOdPp?c#atrS@Q&\FG
j?X@>\Yj51k+3R@+G=hLUlnk@>t6\#q_7k9`X6"Wr6%BQ(u`_^YSQ\HmUdF#A0ngP
PQ(W?Y+>RmVYpGor;G)FZK")1MghohM`QlBWDutr?>)=WU?@E>/B8M(QYrm?+8qhH
C9F8&e"5:i]:"+(g_ei#gZb"a`YpL@OTbZ1FR]HtBWBmQP">g+,a(_o#M%l#o]Gfo
lYf[@b^&cgq6p;'@^+FEK!geq13.@i9D4l;*FN\YmIf.3H$q\QH7OHb7D0VW[a(E'
>C>XS0#t1lD4]5SVNKP>2X4Vh?.6*\q\,T]O)s[#]%hi&MOSKN^%021p?p@Q*nsWi
/UJdrdAhWnHRktckZntqP=pDa1FiuOIMM=[5HN`GB;/MZ<LUa7io=T5PWd=I"`7gg
E8KSrCWhJo7!;VFY?'s,Qdm,bIqW3S<!\-?f%/;IO6)+7rmDG4+kKg\>AhOHGXq'@
'0T"bD0Bj$pZ\nL_>^L(a8Z-ND^sR9$(X_eAT[5Jf&b@l%WLJ:)Hf:^C0H$M%Cd6S
i\^*]\)-`"hL3^s]\ML<<!Usd@9[OY+)YslgA]d6*+!I<iO=$Y/1$E@.-5RjXST8i
O^WDs>r:5/rgAO?HUc$ndJuJhn(m^hS3m5U[Pt&GfGf\@U?AhOXE=SaKBoI@in%r-
\`K\GJtBC9XKK19I5\GqQ8H#:3eGrh+KV/mop_]8FS=Yc:8s(F<Y^q[4h2FFZGJ?_
I4T`6pOb)."28Mu00@SX^IEBfgu-nq(V3lG[UR!13T;9o-"qB/9<e7u<TK.M(:q_Z
gWnP//:Hu*p0D2P/r:#iUY#LEFW:gK$Tci@>EN-jgbPjpmLU@&8]WrH;sLf4qUJYi
gWNr@`L+n$+j:ChTKFsH64M5Fe*uj49#JYefK-HY%@T4)rr?oU4e*Q3gR(+Wp?k+>
#Y0"XOlc5:gH)8"9H:KN^"D_lHXBRL/Sj0QKBf`Q\QlqeX/FrYLJ`-I>a"iLF.D5r
pUcDik7Uf))_TC2]%=PA-U0O+.>$.Rp1?66di/D&TEa!N%fZOO=+7:3<n]1k'ft5J
1$$d+/[EaW=Bs"ioj7T'4m1iGPE<k.5+g35mR;Es<8lm1$<rV@O^i-?^8'pq"m)DD
0XL]-GQ)c6<W<'BStH#_YuL`'ks^f#bHK1*lRjl4RF3up88c/J(gm!pf_Sppm;MRJ
\uP+.XDPAT4c]WgE7>GA"=B\k#7%:-F8EY2dk^JJ\ulLq2:D4r>B4IuFb-H#G))KP
/!q04^r*&[Z<SkmBlW7[jj/.?NhoqEQm8SPgod73C`-3dSc8]$?II3hPcWRlX/U38
m,2S0BkCinpG(4O=7_F,_Uf&<:D)YbM@3[;>K.Dd_"%-\jSc:LRpj:uc0cNpI1jD"
'>i;2Wj4+&(Gn=f>$1J>*7kH=r'KMLnS;W\F)u3+R,(/;QXt>I@17V=h*jE\rSG]?
M:Yf8>9,XceGWXkl5`19F2#n'hKaJ'=s*jfF,A7f.&"9GEpKmloX=K1foGs7*;=LF
Mf"j9c^VTs>&-?qiSB.7WM_!BHctlj"!Cg0pYTWh^coWB',N)CP"AA#UXJGm!O`6E
N/GFdhct%"harh<"g2@1<g!0n=\S(ND\I1@_Wc=Hbq+"2p0ngpnf:YKZ?brr\g3HM
;i?X^nnr4\eSM$k1[*b+1M&U_(-177O!#?'6!Ho1=hSIFFSc5%3=Qe:<o^K%\_kr7
Yj2h@,c9j"-h`<ubgWKJI@Z/k5>ZOJ4Bk6YhL5qc9D0\->4m:?nj2E,$,iV:g7@L@
jQdcu;cg*Udd"q-UGQKR2`*DAd_h=8RQ,0:[EI>iPTZ%DKi82jX>r8c`HO_da2aTd
YBQkqlT>*j>o1Ptc38<WGW8tmY<rMOnZ1ha9FM(!SY0_XNKC/\nN',<ZSK+omE)Z/
1t,Ad3\!A,ee^KpGOh8Q!%gU%5tY.`YVH!.,-1GpZ.nQOLMQ4#comEUFntNK<`2La
&+';/M0#emQoXVSg[!X#M/d4e4k3Dk*V'X\8p0d?YEf??6L&O[J:ii5>j"(qn(Ji:
aD^`Re)3RI8K0.V'iS*I2MtVjlE-b=@mi.1BE/E!U&Lp03ZGj$"+eMa`O9&?GqpCI
p/\38lQ<(e@WeR3g0ODgYP=%!7cXG?"'stH+K&@SkOaChCU3GIq^tftD1o9!<PW8O
eOt*VL`tVpU=)UZ3#:NP@_&+D]*kKC=<l]"m>X(hM8XoB>.9@:0(kX#eSc=,<bAAt
Dl6#opR8t^\^(1QS:#s3>)=J8<2>[K"Xt^[8OtW.0lSO$3Hbb1":7-24>id',k_7[
SO;_LX0gl.loE.QZjb^R`\@1?kuh]*:>lY$Be&6QLK)C%XBk7(?M^lEG\'Pq[ou"]
Bk]C#YWPr.=/.AC*G6G%jqhU?ZUIm@+-1MB94H(=IaD?UY5KSR)F_5^Dgt`s\@m5F
0-;A/[fro2'i0fbVe$WIlSRZ1cCL9p(J_d1eXE]slc3_i_R>3e4t\(Dk#H5f>'"]/
5"fIiJma[DiM^g&+G/(@+[8B=]-eZTI(+%:_6qqI4sPFZ^:PM:rGQJ4S>8S%)g"tL
$R[."9RCf`G06anXg,pQ=::XJi.=g=odi:q`k*P;FbI3'R+#W4&_WGR(EYjOlPTS?
BA3@'g^?8c@C3Wk&[rhOl("0)21qp6dcn1+rMc7<c--4WSnb@larB7U3Uq3_lT57(
LPu$[,7<5=UR:odSQQZ>54a,A%GP.6CIg0AUdQSLU>>/GYDLaMl5@=+L(2JK]r&D,
j)c:]hrQ\Wk-$>+r#qJ)27q;XV!l=9F'Xp%p`:D:N>8U[TDM9Z;4-MBDg3kB^33\s
CUKefHUpDZ:c@**]'?QcIJ:F_f2sYPhEtJn3@'kILMMZGlF/OpFrsD!=OnKrr0#H;
SpWtDHUE:J4hs;j8rqPXh0I'*fJsg[0NkoSk`uib*7eY'?%oRJQItds`;7Z6H!ngm
gb2XoWloQLQaiTZ2Ypcl@*X9^Jklb=-`?*;I:m^l=5Sj9fGMq<QI\En/[4RglE)$D
d95[8Nb:_W%l1HN[Ht/b1eWC@rf^_!61@Y.7D%c/)"cqMgP_0?qQ=>/Z)<3*NNO@C
=e-Js1%K?G/Zp`Dc"5P2EL.Yl2`*4PafXnRHoB9N>r=6Q6HH_4DSsV:IT?Qr/aba6
YQDuYr+0b]rb2-+:Cj?\^M%UF=X'k]BsQJ!k@JH5`]KasFe@3)C$8hk]k6lB%jIc<
A%OVjLYG7i0ti@\QA#2i*n+9W)9r,,/-juqi7`<b%K9!)Sn:bE&1p<!=T*5IbPN+.
/G7-5PECYR4lb!O5>""0f"gS'I6l/Y^%Go:-HphjCUKi0g?r2CVTA@2(ae$#?eJR!
<orE_a4OY^aJIkiS(j$Bg?*`c6&FDA+_u3/0=B:M9>)mVAbals[FtI]G]<'_iC1?"
.\/(LFZuEeDVn1>\+GsWZGrHD1]&d-.qtt\8L0IjJ*Ph@d'78'r?a$)25@pc5rDgF
!(hkSY.'NfelC77AL3`2aXs@Of2oN;)b^.(?K:[$r?sllRCINe)&HrXlHT"__m49O
)o[B%T!_d\5qp]sOsVGi+l)c+SHBIbUT4!%Nq`CRX"XrEK62b25Lah!(CiRAjPX(f
cua[4HC%E>A^u)B3VK`.:@4pj+&m.HoG&neT9l+uqR0]h;TckTjB"li4)s'-3iZp*
5HJ@"FE-']AIak]igue8GZef(AX4>%Rc-\aX5*MbZ9;)EBGmN36KiB-WTj2Z`5eF-
P$I$"F.>mppE&aDM'pOs*f0omq\uL6!9NZGrrBLsJ+nM&p&#<+T@<Xl:?c%g2_iRO
emo_&M<L/.hlHa7$'')a_:mkVAG-7Rfba=:)K6b_YX'kM0np]bEm/U`qpp7dY-$'k
a.jE9A)f7E<FQfbL]AcucMLbV!+t.Fm3]u0ZnlZ/Ic7hiEKC3m<^!'XZ5JZq.]1s)
Q>k%5I?1>oVq6!Zl-j44+)D.P<Qs5\SsN1DA%(Q.?+nI2.,B=sSkG*pC0o0)5\uS$
(@d^Grf^WRAH)YT)Cj%@_!;+$2Jrt:VV9jbk6L7tN;^lmCME#%nikT\:/9q5eR3LK
iq=63Rc55Vq(/\$dkc$K*LT](bf-V9-S$C@WFdSeY1r>lDJ?]qfDD"([<HaGT8`]l
-?QtnbNZeBMmI>9WV2+1lNJhYCSg*[IaA5pB=C<0<RF_oV4j1*d)IrS!7lr+-HMtf
1\Nb)rrC7!U&P+0i;WfG!iaPHIOi!a(&#B-WQ]^]D1SDL(:BI5kL42cW,u_"1gLI4
l8Ud++E^GL"0ri]<RePG(Y$l<f'_nuQQ;u`83FsYd8=R_f9o]<[h6$7;3-Wa7CNa7
kVV_,^+e;a5!!a7>mm[geLIj"%ApV@CtDmm05f]D]scHgNAMhFedB[-c`;0M%%NiS
FDJiu'tV&US7`)fQ9!9"[G(ukUlCN_cX^pcPhRrFaQ`E1X_(n^l1O=LY8*>P?<b#'
K3pMLmA8)kR[n,hc'Xjj&$0Xc\X-`QP7=8@0uYajhdJ'EqaEG&MFl/e]DEPGrrD0L
;#^O(n:11`>3W^_?r[*nol;^8X-%KnpQ->eef*,H25@s3lE2HS9';Q;bOop@1SAC-
m]E%Hq?K0nmq*CP3jIs)^SAYU^6;%i/,=TgW]Fe[.KI/j2R>XQ"3o,,.ed]YQ]5%g
k5(-5IL[s>6G%+!Q93TufZi;s,D1]FoQlk/Y7fZaOi0R/dKj9">0a"HJSeN^^BVrN
=4q;)%;DuW>2ei*0(f<U5D8<1A=Uk)1<U+rqO)'"g6V2@G15rGcSqeEMMnX@YL-Bn
[Mpk0/-YUa<#PC23';%p@QVg/_S:YZr7hX*:(&\PVU\mbZS(s?XL4$,957sh?8m(U
!W04EFj__Roika]bCG?.hj'C4STu)3?X(6\YSF77?#6L"Wj[X:J2OGI!![rW,fRnt
,a)&g8IHmmN&i&EP4;gO''C?"!$3DV!:H#<fjcLAXgQ!(?nQMj?iW&0P-X*8]Ca"?
l">a=D4*ce>SblObPT2+PcMg=X$+!V7>@mEOQnNjbD=]WA9n1?3#nK<NhT-KX_Sgl
^`(dS)UKT,3s=dnP*E7mJ+6Of^\$EUrrA\&C=ZNJ5PV8Chth9;rrCC$2'k<*,a(bt
8L0IhT<,fuF[,_Al+d+DMRAaGemJ56TD^`khu1:.>0/3b,a(bt8L0IhS=f^ZFRT/e
kPkPFm[CPL:/Cj=\p+.CoD\g^pJ"i5.7keJ8lA5+P+8W/m&Z_Do^8%8;lP>5PX'Jl
\-EB,C!kKIRFaoaR@%6nDA?:bbK7@NXKSPY-uId,gYQbZ<laV3R1us#qG!_p4A+K,
[XCo1O-]0Lbmqq(pFjU-[GQ/k*a0k69#o&p^>)u*nXXY/b%<`g[I+J5QNsh@Y1`lA
m4#haMdqRegcTnhH=cQga*Sb6_m\$=F'LYQYE<J3Is5la5KW#(iakuXNF#pI\(,8<
1r0FT6.?M%.[\^_NK$ss0FanF2S,=`+>JLa7%*BVIY<,#hQ)=ek,ZR?eW.oO7;T9L
r9W5-m3NmJ?'LLTrr?.VXhj4,7lMF,\G3O9=n$c?im[Y!V5ncG?WOH)FSh(N*H!aL
-%HqOF&(>qS\`Qd>!s/m,k2kW?r;aB;:]co/'"ge\[4:G,:U)_TjVZ^g4%R(EG,i4
aI"#aYJeD\$Po6n"BRr0>6g?]d'I*+0J[Bi)j>Ku/pXl"N-fsX'(,,]CbH5Me?uI\
5*joBDJ)=N]%cSql0['LGJ<>]h<fFef[fWOl#^YHiGLNtF$lB^BbC^$&61r1gY'hj
pjrjToj,LXOcE,E')[\\chne"=]IiM`djO%8Hm[Jh++DL<NYN\!O'_P]?,Gd;d>IM
fDu,s&D"qXHiPF*X=f`cCqcm7rG6pmWVA6'[\bm,81s\IU]m!L.m'S3e9Zu9[cK^M
CSdG"h3@4Fa`WUY[_-o=a/uR\-=V5gWmJZJ]h8Qa=c&=,nes_aO(Gb1@ou6VY$Yae
^QRtGLFX6e']nEaWQDI_0",S;kUbS+ELj:MN3T0LdnMnJi),DjMTgH,Dm$D)]6<aM
>YE82XLPd'I+,#G[bjm,YGb97CJAtQj&OU@kuVA)Euc>661,kr9:U3&Vke`LZd`j;
Y<*K&HZA8]+H%Xsc/k>cf\sBL!@3,-=+BBd:B(;]e3E[HSc8]&WJ<pfZGj:'0<;eQ
^prC^f&F_\ecE5B1rG#9_832X:!cK!)A?>WrG'?MUZU6d??7c;4e@kpJXK_GrMOG$
pZ"-("5K0<NK6gU2-@5F[8=lo_;NlRU[fWABI2\PU8N,@h2qMM2WinMde@A)p+_lf
>dHHD3se*78SI2LaB^d?1SM23IIGDEc.:?c3pI[@c/9+0KCcR!JC[L%%-[I\E6*3>
emb/%Pfb"V"Wj`32ZkXA>[k`E"l-4m26LY/J09Xjl3JigMf&S%";qG@6?SRd@F"h2
>qS3n/\)^W,g"`!ICSsln_7/LWJd"(8L129VZueF?.!RP#!%+!V!&nXkAG1ppoW9]
^`MHGoG2PoToj,q)tlmY5M>>BX*o0&VRR:Vec=1/l*oIk:9mQ8h+o,jA[8<lgt"L3
rE\1V.g:G:qA4b8DVI9snl/CYlW&9d]!Y>;J9(16[R^#T^DXBVPi-n_OE<!'_>:Kl
DHZU7:+Hd-nhu$To;]RPZ#6S"o5^46aQaQ]LXtm/B%GR4&"'JYh>F6=X/9B(F]i![
47/@>Zr#LM.]'QqUZp4Z"lHmr>jha&&15m.OE3-kcGRC%+AGur^7,@cCh[Co!fW9K
H,aAQcB46Ge_'2j`2qL]9jj;i!.spPU_;E$mLesN6H""l=(1baI\0uLKlsQ(gTcO,
f/M&d79.q!`3aH%-?UC?\#A8-r7gOKQQ0i(0Y3`fG\,itY(h-UGn+P)p/QTTFj]Pg
<lZcilS0aDo9kc]J'^s)kbN<4I>afYh.:Ks9f:O'5+CoGZj'Rg14JX`dcgHZl.n7f
>?i7hh.?$p3pU&:D/f&!GsK72pfMfXZR70`FUK,H>OQo_D%XEZ;Zg4Nj0c5Q9%6+q
:_]a\)uDFljAT^#+/qA0NoS0](`RU)&h=J61@GCVX*"VS=buqNQ_lLm6X4IOXcc02
E?YnVNq:*fdU"l5eB;m7Db-kObLrE?C2H^_rhJ_iD=>&0f&m5A2p?a;%:5%f0=PP!
dob>.I10_IN:bfgYi"_Z6[ce*Yj]30[X(_Ja7f0)W]`SkAp$=P/KOrZ[iOZ/:3#l!
mZbtNrrB,@6tB/%\b/=0Z!_d\]:A$p-Tnl[3l3<n7UaNbam3JdMUjR*&,B2U>k_Dd
iu\.]>0qVuKYejKj0We4do(f[%^)LZOb&#RGr7dPa#dVUdiWnO[l5>`'-b0#_e#3P
D0aVb''Hnsh5tB(gN4[I(d6JEZau/4#&ZdHlcqD8(gU.K]ree"FnWFdHRH.g><Z_Q
8g<+uU!hhQr2YN/=d=,jXknu<`Po13Y.]Rrl%_CPhk^li56J*EQL#-_fMAfNrLi3$
<ERO2Uj](i1;@oO`\j>F-\@EV40K0)HF>P@mlM)MJ'Mq1=oSIf*t,")iT7KAjW)".
@pQCaLU5L_,C$5s"uWOBG.5=[7u7r4knkeFo\)"Ui;4?!Y'A;SgDk%;_tq]!.cO#H
V+Dqq8q6lo~>

n
Q
Q
Q
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
